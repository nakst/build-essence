name: nightly

on:
  schedule:
    - cron: "0 6 * * *"

jobs:

  build-mac:
    runs-on: macos-10.15
    timeout-minutes: 180
    steps:
      - name: checkout
        uses: actions/checkout@v2          
      - name: install dependencies
        run: brew install gcc@11 nasm ctags xz coreutils gnu-sed
      - name: build
        id: build
        run: git clone --depth=1 https://gitlab.com/nakst/essence.git && essence/util/automation/build_default.sh

  run-tests:
    runs-on: ubuntu-20.04
    timeout-minutes: 120
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: install dependencies
        run: |
          sudo apt-get update  
          sudo apt-get install --no-install-recommends -y ca-certificates xz-utils texinfo patch make curl \
            ctags m4 nasm meson ninja-build libharfbuzz-dev qemu qemu-utils qemu-system-x86 gcc g++
          pip install mako
      - name: build
        id: build
        run: git clone --depth=1 https://gitlab.com/nakst/essence.git && essence/util/automation/run_tests.sh
      - name: upload
        id: upload       
        uses: actions/upload-artifact@v2
        with:
          name: debug-info
          path: essence
      - name: check
        id: check
        run: "test ! -s essence/bin/Logs/Test\\ Failures.txt"
        
  build-minimal:
    runs-on: ubuntu-20.04
    timeout-minutes: 120
    steps:
      - name: checkout
        uses: actions/checkout@v2          
      - name: install dependencies
        run: |
          sudo apt-get install --no-install-recommends -y ca-certificates xz-utils texinfo patch make curl ctags m4 nasm gcc g++
      - name: build
        id: build
        run: git clone --depth=1 https://gitlab.com/nakst/essence.git && essence/util/automation/build_minimal.sh
      - name: upload
        id: upload       
        uses: actions/upload-artifact@v2
        with:
          name: drive
          path: essence/bin/drive
          
  build-full:
    runs-on: ubuntu-20.04
    timeout-minutes: 120
    steps:
      - name: checkout
        uses: actions/checkout@v2          
      - name: install dependencies
        run: |
          sudo apt-get update  
          sudo apt-get install --no-install-recommends -y ca-certificates xz-utils texinfo patch make curl \
            ctags m4 nasm meson ninja-build libharfbuzz-dev qemu qemu-utils qemu-system-x86 gcc g++
          pip install mako
      - name: build
        id: build
        run: git clone --depth=1 https://gitlab.com/nakst/essence.git && essence/util/automation/build.sh
      - name: release
        if: steps.build.outputs.RELEASE_NAME != ''
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.build.outputs.RELEASE_NAME }}
          release_name: ${{ steps.build.outputs.RELEASE_NAME }}
          body: |
            Essence automatically built from commit ${{ steps.build.outputs.COMMIT }}. 
            Download and extract `Essence.tar.xz`. If you are using VirtualBox, import `Essence.ova`. 
            If you are using Qemu, run `qemu-kvm -drive file=drive,format=raw -m 2048 -smp 2 -serial /dev/stdout >> log.txt || qemu-system-x86_64 -enable-kvm -drive file=drive,format=raw -m 2048 -smp 2 -serial /dev/stdout >> log.txt`.
      - name: upload
        if: steps.build.outputs.RELEASE_NAME != ''
        id: upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./${{ steps.build.outputs.OUTPUT_BINARY }}
          asset_name: Essence.tar.xz
          asset_content_type: application/x-compressed
      - name: upload_debug_info
        if: steps.build.outputs.RELEASE_NAME != ''
        id: upload_debug_info
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./${{ steps.build.outputs.DEBUG_OUTPUT_BINARY }}
          asset_name: _DebugInfo.tar.xz
          asset_content_type: application/x-compressed
